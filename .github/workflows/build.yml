name: build

on:
  push:
    branches: [ "main" ]
  pull_request: {}
  workflow_dispatch: {}

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  cmake:
    name: "${{ matrix.os }} | ${{ matrix.build_type }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: "windows-latest"
            triplet: "x64-windows"
            build_type: "Release"
          - os: "macos-14"
            triplet: "arm64-osx"
            build_type: "Release"

    env:
      VCPKG_DEFAULT_TRIPLET: "${{ matrix.triplet }}"
      VCPKG_BUILD_TYPE: "release"
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      VCPKG_CMAKE_CONFIGURE_OPTIONS: "-G;Ninja;-DCMAKE_MAKE_PROGRAM=ninja"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get CMake + Ninja
        uses: lukka/get-cmake@latest

      # ---------- Windows: 短いワークスペースにコピー ----------
      - name: Prepare short workspace (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (Test-Path 'C:\w') { Remove-Item 'C:\w' -Recurse -Force }
          New-Item -ItemType Directory -Force -Path 'C:\w' | Out-Null
          Copy-Item "$env:GITHUB_WORKSPACE\*" 'C:\w' -Recurse -Force
          'SHORT_WS=C:\w' | Out-File -FilePath $env:GITHUB_ENV -Append
          New-Item -ItemType Directory -Force -Path 'C:\vd' | Out-Null
          New-Item -ItemType Directory -Force -Path 'C:\vi' | Out-Null

      - name: Enable long paths (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: git config --system core.longpaths true

      - name: Setup MSVC Dev Environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install ninja --no-progress -y
          ninja --version

      # ---------- Unix (macOS) 依存ツール ----------
      - name: Install build deps (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          brew update
          brew install autoconf-archive automake libtool pkg-config ninja

      # ---------- vcpkg（manifest） ----------
      - name: Clone vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Test-Path "$env:SHORT_WS\vcpkg\.git")) {
            git clone https://github.com/microsoft/vcpkg.git "$env:SHORT_WS\vcpkg"
          }

      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          & "$env:SHORT_WS\vcpkg\bootstrap-vcpkg.bat" -disableMetrics

      - name: Setup vcpkg (manifest) [Windows]
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: "${{ env.SHORT_WS }}\\vcpkg"
          vcpkgJsonGlob: "vcpkg.json"
          doNotUpdateVcpkg: true

      - name: Setup vcpkg (manifest) [Unix]
        if: runner.os != 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: "vcpkg.json"
          doNotUpdateVcpkg: true

      # ---------- Preflight ----------
      - name: Preflight check (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host 'CMake:'; cmake --version
          Write-Host 'Ninja:'; ninja --version
          $tc = "$env:SHORT_WS\vcpkg\scripts\buildsystems\vcpkg.cmake"
          Write-Host "Toolchain exists? $tc"; Test-Path $tc | Out-Host

      # ---------- Configure / Build ----------
      - name: Configure (CMake + Ninja) [Windows]
        if: runner.os == 'Windows'
        working-directory: "${{ env.SHORT_WS }}"
        env:
          VCPKG_DOWNLOADS: "C:\\vd"
        run: >
          cmake -S . -B _b
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.SHORT_WS }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          -DVCPKG_INSTALLED_DIR=C:/vi
          -DCMAKE_MAKE_PROGRAM=ninja
          -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build [Windows]
        if: runner.os == 'Windows'
        working-directory: "${{ env.SHORT_WS }}"
        run: cmake --build _b --config ${{ matrix.build_type }}

      - name: Configure (CMake + Ninja) [Unix]
        if: runner.os != 'Windows'
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
          -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build [Unix]
        if: runner.os != 'Windows'
        run: cmake --build build --config ${{ matrix.build_type }}

      # ---------- Install → dist に集約 ----------
      - name: Install [Windows]
        if: runner.os == 'Windows'
        working-directory: "${{ env.SHORT_WS }}"
        run: cmake --install _b --config ${{ matrix.build_type }} --prefix "${{ env.SHORT_WS }}\\dist"

      - name: Install [Unix]
        if: runner.os != 'Windows'
        run: cmake --install build --config ${{ matrix.build_type }} --prefix dist

      # ---------- Qt Deploy（存在すれば実行・無ければスキップ） ----------
      - name: Qt deploy [Windows]
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $exe = Get-ChildItem "${{ env.SHORT_WS }}\dist\bin\*.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($exe) {
            $tool = Get-ChildItem "${{ env.SHORT_WS }}\vcpkg\installed\${{ matrix.triplet }}\tools" -Directory -ErrorAction SilentlyContinue | Where-Object { $_.Name -like 'qt*' } | Select-Object -First 1
            if ($tool -and (Test-Path "$($tool.FullName)\bin\windeployqt.exe")) {
              & "$($tool.FullName)\bin\windeployqt.exe" "$($exe.FullName)"
            } else {
              Write-Host "windeployqt not found. Skip."
            }
          } else {
            Write-Host "No exe under dist\\bin. Skip Qt deploy."
          }

      - name: Qt deploy [macOS]
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP="$(ls dist/*.app 2>/dev/null | head -n1 || true)"
          if [ -n "$APP" ]; then
            if command -v macdeployqt >/dev/null 2>&1; then
              macdeployqt "$APP" -always-overwrite || true
            else
              TOOL="$(ls "${VCPKG_ROOT}/installed/${{ matrix.triplet }}/tools"/qt*/bin/macdeployqt 2>/dev/null | head -n1 || true)"
              if [ -n "$TOOL" ]; then "$TOOL" "$APP" -always-overwrite || true; else echo "macdeployqt not found. Skip."; fi
            fi
          else
            echo "No .app in dist. Skip Qt deploy."
          fi

      # ---------- 失敗時ログ回収 ----------
      - name: Upload vcpkg logs (on fail, Windows)
        if: failure() && runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: vcpkg-logs-windows
          path: |
            ${{ env.SHORT_WS }}/vcpkg/buildtrees/**/*.log
            ${{ env.SHORT_WS }}/vcpkg/buildtrees/**/*-out.log

      - name: Upload CMake logs (on fail, Unix)
        if: failure() && runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: cmake-logs-unix
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log

      - name: Upload build logs (on fail, Unix)
        if: failure() && runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-unix
          path: |
            build/**/*.log
            build/**/Testing/**/*.log

      # ---------- 成果物アップロード ----------
      - name: Upload build artifacts (Windows)
        if: always() && runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: "windows-${{ matrix.build_type }}"
          path: ${{ env.SHORT_WS }}\dist\**
          if-no-files-found: error

      - name: Upload build artifacts (macOS)
        if: always() && runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: "macos-${{ matrix.build_type }}"
          path: dist/**
          if-no-files-found: error
