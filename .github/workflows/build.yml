name: build

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cmake:
    name: ${{ matrix.os }} | ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            build_type: Release
          - os: windows-latest
            triplet: x64-windows
            build_type: Release
          - os: macos-14
            triplet: arm64-osx
            build_type: Release

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_BUILD_TYPE: release
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get CMake + Ninja
        uses: lukka/get-cmake@latest

      # macOS: libpqがautoconf等を要求、Ninjaも必要
      - name: Install build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf automake libtool pkg-config ninja

      # Windows: 長パス対策で短いドライブ文字にマウント
      - name: Map short drive on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          subst S: $env:GITHUB_WORKSPACE
          echo "SHORT_WS=S:\\" | Out-File -FilePath $env:GITHUB_ENV -Append

      # vcpkg（manifest）。★ここには working-directory を付けない！
      - name: Setup vcpkg (manifest)
        uses: lukka/run-vcpkg@v11
        with:
          appendedCacheKey: ${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json') }}

      # Configure / Build は Windows のみ短い作業ディレクトリで実行
      - name: Configure (CMake + Ninja) [Windows short path]
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        run: >
          cmake -S . -B _b
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"

      - name: Build [Windows short path]
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        run: cmake --build _b

      # Unix系は従来どおり
      - name: Configure (CMake + Ninja) [Unix]
        if: runner.os != 'Windows'
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"

      - name: Build [Unix]
        if: runner.os != 'Windows'
        run: cmake --build build

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.build_type }}-binaries
          path: |
            _b/**
            build/**
            !**/CMakeFiles/**
            !**/Testing/**
