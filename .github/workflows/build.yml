name: build

on:
  push:
    branches: ["main"]
  pull_request: {}
  workflow_dispatch: {}

# 最小権限
permissions:
  contents: read
  actions: read
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cmake:
    name: "${{ matrix.os }} | ${{ matrix.build_type }}"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 300
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows
            build_type: Release
          - os: macos-14
            triplet: arm64-osx
            build_type: Release

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_BUILD_TYPE: release
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg-cache

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # --- ディスク状況確認 ---
      - name: Ensure sufficient disk space (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $d = Get-PSDrive -Name C
          "{0:N2} GB free / {1:N2} GB total" -f ($d.Free/1GB), (($d.Used+$d.Free)/1GB) | Write-Host
          Write-Host "⚠️ If free space < ~15GB, VTK+Qt builds may fail."

      - name: Ensure sufficient disk space (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          df -h /
          echo "⚠️ If free space < ~15GB, VTK+Qt builds may fail."

      # vcpkg キャッシュ
      - name: Cache vcpkg (local binary cache)
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg-cache
          key: vcpkg-v3-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json') }}-${{ hashFiles('cmake/common_settings.cmake','cmake/windows_settings.cmake','cmake/macos_settings.cmake') }}
          restore-keys: |
            vcpkg-v3-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json') }}-
            vcpkg-v3-${{ runner.os }}-${{ matrix.triplet }}-
            vcpkg-v3-${{ runner.os }}-
          enableCrossOsArchive: false

      - name: Ensure vcpkg cache dir
        shell: bash
        run: mkdir -p "${{ github.workspace }}/vcpkg-cache"

      - name: Get CMake + Ninja
        uses: lukka/get-cmake@latest

      # --- Windows 短パスワークスペース ---
      - name: Prepare short workspace (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path 'C:\w') { Remove-Item 'C:\w' -Recurse -Force }
          New-Item -ItemType Directory -Force -Path 'C:\w' | Out-Null
          Copy-Item "$env:GITHUB_WORKSPACE\*" 'C:\w' -Recurse -Force
          'SHORT_WS=C:\w' | Out-File -FilePath $env:GITHUB_ENV -Append
          New-Item -ItemType Directory -Force -Path 'C:\vd' | Out-Null
          New-Item -ItemType Directory -Force -Path 'C:\vi' | Out-Null

      # --- Git long paths ---
      - name: Enable long paths (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: ${{ env.SHORT_WS }}
        run: |
          git config --global core.longpaths true
          git config core.longpaths true

      - name: Setup MSVC Dev Environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install ninja --no-progress -y
          ninja --version

      # --- macOS toolchain ---
      - name: Install build deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf-archive automake libtool pkg-config ninja jq

      # --- vcpkg ---
      - name: Clone vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Test-Path "$env:SHORT_WS\vcpkg\.git")) {
            git clone https://github.com/microsoft/vcpkg.git "$env:SHORT_WS\vcpkg"
          }

      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          & "$env:SHORT_WS\vcpkg\bootstrap-vcpkg.bat" -disableMetrics

      - name: Setup vcpkg (manifest) [Windows]
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ env.SHORT_WS }}\vcpkg
          vcpkgJsonGlob: vcpkg.json
          doNotUpdateVcpkg: true

      - name: Setup vcpkg (manifest) [macOS]
        if: runner.os == 'macOS'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: vcpkg.json
          doNotUpdateVcpkg: true

      # --- vcpkg baseline チェック ---
      - name: Verify vcpkg baseline integrity
        shell: bash
        run: |
          EXPECTED_HASH="b6649256091aa433d6d7a912eb5f2c7725a0c040"
          if command -v jq >/dev/null 2>&1; then
            CURRENT_HASH=$(jq -r '."builtin-baseline"' vcpkg.json 2>/dev/null || echo "")
          else
            CURRENT_HASH=$(grep -o '"builtin-baseline"[[:space:]]*:[[:space:]]*"[^"]*"' vcpkg.json | sed 's/.*"\([^"]*\)"/\1/' || echo "")
          fi
          if [ -z "$CURRENT_HASH" ]; then
            echo "⚠️ Could not parse vcpkg baseline"
          elif [ "$CURRENT_HASH" != "$EXPECTED_HASH" ]; then
            echo "⚠️ vcpkg baseline mismatch:"
            echo "  Expected: $EXPECTED_HASH"
            echo "  Current:  $CURRENT_HASH"
            echo "ℹ️ Consider updating baseline in a separate PR."
          else
            echo "✅ vcpkg baseline is up to date"
          fi

      # --- 計測開始 ---
      - name: Start build timer
        shell: bash
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      # --- Configure ---
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        env:
          VCPKG_DOWNLOADS: C:\vd
          CL: /MP2
        shell: pwsh
        run: |
          cmake -S . -B _b -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE="${{ env.SHORT_WS }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_INSTALLED_DIR=C:/vi -DCMAKE_MAKE_PROGRAM=ninja -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_CXX_FLAGS="/bigobj"

      - name: Configure (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" -DCMAKE_VERBOSE_MAKEFILE=ON

      # --- 早期失敗検知 ---
      - name: Early failure detection
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            CFG="${{ env.SHORT_WS }}/_b/CMakeCache.txt"
          else
            CFG="build/CMakeCache.txt"
          fi
          if [ -f "$CFG" ]; then
            grep -q "CMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }}" "$CFG" || { echo "❌ Build type mismatch"; exit 1; }
            if ! grep -q "VTK_DIR" "$CFG"; then
              echo "⚠️ VTK not resolved; build may fail"
            fi
            if grep -q "NOTFOUND" "$CFG"; then
              echo "❌ Unresolved variables detected in CMakeCache.txt"
              exit 1
            fi
            echo "✅ CMake configuration validated"
          fi

      # --- Build ---
      - name: Build (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        env:
          CL: /MP2
        shell: bash
        run: cmake --build _b --config ${{ matrix.build_type }} --parallel 2

      - name: Build (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: cmake --build build --config ${{ matrix.build_type }}

      # --- Install ---
      - name: Install (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        shell: bash
        run: |
          cmake --install _b --config ${{ matrix.build_type }} --prefix "${{ env.SHORT_WS }}\\dist"

      - name: "Debug: list install outputs (Windows)"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "== DIR dist =="
          if (Test-Path "${{ env.SHORT_WS }}\dist") {
            Get-ChildItem -Recurse "${{ env.SHORT_WS }}\dist" | Select-Object FullName,Length | Format-Table -AutoSize
          } else {
            Write-Host "dist folder does not exist."
          }
          Write-Host "== Find EXEs/DLLs in build tree =="
          Get-ChildItem -Recurse "${{ env.SHORT_WS }}\_b" -Include *.exe,*.dll -ErrorAction SilentlyContinue |
            Select-Object FullName,Length | Format-Table -AutoSize

      - name: Install (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: cmake --install build --config ${{ matrix.build_type }} --prefix dist

      # --- Verify ---
      - name: Verify build artifacts (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        shell: pwsh
        run: |
          $exe = "${{ env.SHORT_WS }}\dist\bin\Strecs3D.exe"
          if (-not (Test-Path $exe)) { throw "❌ Strecs3D.exe not found in dist\bin" }
          $fileInfo = Get-Item $exe
          Write-Host "✅ Executable found: $($fileInfo.Length) bytes"
          try { & $exe --version 2>&1 | Out-Host } catch { Write-Warning "⚠️ Executable run check failed (likely GUI app)"; }

      - name: Verify build artifacts (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP="dist/Strecs3D.app"
          [ -d "$APP" ] || { echo "❌ Strecs3D.app not found"; exit 1; }
          EXE="$APP/Contents/MacOS/Strecs3D"
          [ -x "$EXE" ] || { echo "❌ Executable not found or not executable"; exit 1; }
          echo "✅ App bundle size: $(du -sh "$APP" | awk '{print $1}')"
          codesign -dv "$APP" 2>&1 || echo "⚠️ No code signature (expected in CI)."

      # --- Qt deploy ---
      - name: Qt deploy (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $exe = Get-ChildItem "${{ env.SHORT_WS }}\dist\bin\*.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($exe) {
            $candidates = @(
              "${{ env.SHORT_WS }}\vcpkg\installed\${{ matrix.triplet }}\tools\qt6\bin\windeployqt.exe",
              "${{ env.SHORT_WS }}\vcpkg\installed\${{ matrix.triplet }}\tools\qt\bin\windeployqt.exe"
            )
            $tool = $candidates | Where-Object { Test-Path $_ } | Select-Object -First 1
            if ($tool) {
              Write-Host "✅ Using Qt deploy tool: $tool"
              try {
                & $tool "$($exe.FullName)" --verbose 2
                Write-Host "✅ Qt deployment completed"
              } catch {
                Write-Warning "⚠️ Qt deployment failed but continuing: $_"
              }
            } else {
              Write-Host "ℹ️ windeployqt not found. Listing candidates under tools:"
              Get-ChildItem "${{ env.SHORT_WS }}\vcpkg\installed\${{ matrix.triplet }}\tools" -Recurse -Name "*qt*" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $_" }
            }
          } else {
            Write-Host "ℹ️ No exe under dist\bin. Skip Qt deploy."
          }

      - name: Qt deploy (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP="$(ls dist/*.app 2>/dev/null | head -n1 || true)"
          if [ -n "$APP" ]; then
            TOOL="$(ls "${VCPKG_ROOT}/installed/${{ matrix.triplet }}/tools"/qt*/bin/macdeployqt 2>/dev/null | head -n1 || which macdeployqt 2>/dev/null || true)"
            if [ -n "$TOOL" ]; then
              "$TOOL" "$APP" -always-overwrite -verbose 2 || echo "⚠️ macdeployqt returned non-zero, continuing."
            else
              echo "ℹ️ macdeployqt not found. Skip."
            fi
          else
            echo "ℹ️ No .app in dist. Skip."
          fi

      # --- 計測終了 & メトリクス保存 ---
      - name: Calculate build time
        shell: bash
        run: |
          BUILD_END=$(date +%s)
          echo "BUILD_TIME=$((BUILD_END - BUILD_START))" >> $GITHUB_ENV
          echo "Build completed in $((BUILD_END - BUILD_START)) seconds"

      - name: Collect build metrics
        if: always()
        shell: bash
        run: |
          cat > build-metrics.json <<EOF
{
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "runner_os": "${{ runner.os }}",
  "build_type": "${{ matrix.build_type }}",
  "build_time_seconds": "${BUILD_TIME:-0}",
  "git_sha": "${{ github.sha }}",
  "workflow_run_id": "${{ github.run_id }}"
}
EOF

      - name: Upload build metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-metrics-${{ runner.os }}-${{ github.run_number }}
          path: build-metrics.json
          retention-days: 90

      # --- 失敗時ログ＆診断 ---
      - name: Upload logs (on fail, Windows)
        if: failure() && runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs-windows-${{ github.run_number }}
          path: |
            ${{ env.SHORT_WS }}/vcpkg/buildtrees/**/*.log
            ${{ env.SHORT_WS }}/vcpkg/buildtrees/**/*-out.log
            ${{ env.SHORT_WS }}/_b/CMakeFiles/CMakeOutput.log
            ${{ env.SHORT_WS }}/_b/CMakeFiles/CMakeError.log
            ${{ env.SHORT_WS }}/_b/**/*.log
          retention-days: 7

      - name: Upload logs (on fail, macOS)
        if: failure() && runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs-macos-${{ github.run_number }}
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
            build/**/*.log
            ${VCPKG_ROOT}/buildtrees/**/*.log
          retention-days: 7

      - name: Analyze failure and suggest fixes
        if: failure()
        shell: bash
        run: |
          echo "=== Failure Analysis ===" > failure-analysis.txt
          if [ "${{ runner.os }}" = "Windows" ]; then
            LOG_FILE="${{ env.SHORT_WS }}/_b/CMakeFiles/CMakeError.log"
          else
            LOG_FILE="build/CMakeFiles/CMakeError.log"
          fi

          echo "Log file: $LOG_FILE" >> failure-analysis.txt

          if [ -f "$LOG_FILE" ]; then
            echo "" >> failure-analysis.txt
            echo "---- Last 200 lines of error log ----" >> failure-analysis.txt
            tail -n 200 "$LOG_FILE" >> failure-analysis.txt || true
            echo "" >> failure-analysis.txt

            if grep -i -q "out of memory\|cannot allocate memory" "$LOG_FILE"; then
              echo "🔍 LIKELY: Memory exhaustion detected." >> failure-analysis.txt
              echo "💡 Suggestion: reduce parallelism, choose a larger runner, or split build." >> failure-analysis.txt
            fi

            if grep -i -q "NOTFOUND" "$LOG_FILE"; then
              echo "🔍 LIKELY: Missing dependency or CMake NOTFOUND entries." >> failure-analysis.txt
              echo "💡 Suggestion: check vcpkg installation and VCPKG_INSTALLED_DIR." >> failure-analysis.txt
            fi

            if grep -i -q "error: '.*' file not found" "$LOG_FILE"; then
              echo "🔍 LIKELY: Missing include/header." >> failure-analysis.txt
              echo "💡 Suggestion: verify include paths and installed packages." >> failure-analysis.txt
            fi

            if grep -i -q "error: linking with '.*' failed" "$LOG_FILE"; then
              echo "🔍 LIKELY: Linker errors." >> failure-analysis.txt
              echo "💡 Suggestion: check library paths and runtime dependencies." >> failure-analysis.txt
            fi

          else
            echo "⚠️ No CMake error log found at expected location." >> failure-analysis.txt
            echo "💡 Suggestion: ensure CMake produced logs or adjust paths in workflow." >> failure-analysis.txt
          fi

          echo "" >> failure-analysis.txt
          echo "Full environment summary:" >> failure-analysis.txt
          echo "RUNNER_OS=${{ runner.os }}" >> failure-analysis.txt
          echo "MATRIX_BUILD_TYPE=${{ matrix.build_type }}" >> failure-analysis.txt
          echo "WORKSPACE=${{ github.workspace }}" >> failure-analysis.txt
          echo "SHORT_WS=${{ env.SHORT_WS }}" >> failure-analysis.txt

      - name: Upload failure analysis (on fail)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-analysis-${{ github.run_number }}-${{ runner.os }}
          path: failure-analysis.txt
          retention-days: 7
