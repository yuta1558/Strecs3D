name: build

on:
  push:
    branches: [ "main" ]
  pull_request: {}
  workflow_dispatch: {}

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  cmake:
    name: "${{ matrix.os }} | ${{ matrix.build_type }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: "windows-latest"
            triplet: "x64-windows"
            build_type: "Release"
          - os: "macos-14"
            triplet: "arm64-osx"
            build_type: "Release"

    env:
      VCPKG_DEFAULT_TRIPLET: "${{ matrix.triplet }}"
      VCPKG_BUILD_TYPE: "release"
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      VCPKG_CMAKE_CONFIGURE_OPTIONS: "-G;Ninja;-DCMAKE_MAKE_PROGRAM=ninja"

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: "Get CMake + Ninja"
        uses: lukka/get-cmake@latest

      # ---------- Windows: 実ディレクトリ短縮（substは使わない） ----------
      - name: "Prepare short workspace (Windows)"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (Test-Path 'C:\w') { Remove-Item 'C:\w' -Recurse -Force }
          New-Item -ItemType Directory -Force -Path 'C:\w' | Out-Null
          Copy-Item "$env:GITHUB_WORKSPACE\*" 'C:\w' -Recurse -Force
          'SHORT_WS=C:\w' | Out-File -FilePath $env:GITHUB_ENV -Append
          New-Item -ItemType Directory -Force -Path 'C:\vd' | Out-Null  # vcpkg downloads
          New-Item -ItemType Directory -Force -Path 'C:\vi' | Out-Null  # vcpkg installed

      - name: "Enable long paths (Windows)"
        if: runner.os == 'Windows'
        shell: pwsh
        run: git config --system core.longpaths true

      - name: "Setup MSVC Dev Environment (Windows)"
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: "Install Ninja (Windows)"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install ninja --no-progress -y
          ninja --version

      - name: "Setup Python (Windows)"
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # ---------- Windows: vcpkg をワークスペース内にクローン＆ブートストラップ ----------
      - name: "Clone vcpkg (Windows)"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Test-Path "$env:SHORT_WS\vcpkg\.git")) {
            git clone https://github.com/microsoft/vcpkg.git "$env:SHORT_WS\vcpkg"
          } else {
            Write-Host "vcpkg repo already exists at $env:SHORT_WS\vcpkg"
          }

      - name: "Bootstrap vcpkg (Windows)"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          & "$env:SHORT_WS\vcpkg\bootstrap-vcpkg.bat" -disableMetrics
          if ($LASTEXITCODE -ne 0) { throw "bootstrap-vcpkg failed with code $LASTEXITCODE" }

      # ---------- Unix（macOS/Ubuntu）: ビルド必須ツール ----------
      - name: "Install build deps (Unix)"
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y \
              build-essential \
              ninja-build \
              autoconf-archive \
              pkg-config
          else
            brew update
            brew install \
              autoconf-archive \
              automake \
              libtool \
              pkg-config \
              ninja
          fi

      # ---------- vcpkg（Windowsは C:\w\vcpkg を使用、mac はデフォルト） ----------
      - name: "Setup vcpkg (manifest) [Windows]"
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: "${{ env.SHORT_WS }}\\vcpkg"
          vcpkgJsonGlob: "vcpkg.json"
          doNotUpdateVcpkg: true

      - name: "Setup vcpkg (manifest) [Unix]"
        if: runner.os != 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: "vcpkg.json"
          doNotUpdateVcpkg: true

      # ---------- Windows: 壊れた中間物を掃除（harfbuzz/Qt系） ----------
      - name: "Clean vcpkg buildtrees (Windows)"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          foreach ($p in @('qtdeclarative','qtbase','harfbuzz')) {
            $t = "$env:SHORT_WS\vcpkg\buildtrees\$p"
            if (Test-Path $t) { Remove-Item $t -Recurse -Force -ErrorAction SilentlyContinue }
          }

      # ---------- Preflight（原因の切り分けを最短化） ----------
      - name: "Preflight check (Windows)"
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host 'CMake:'; cmake --version
          Write-Host 'Ninja:'; ninja --version
          $tc = "$env:SHORT_WS\vcpkg\scripts\buildsystems\vcpkg.cmake"
          Write-Host "Toolchain exists? $tc"; Test-Path $tc | Out-Host
          Write-Host 'MSVC cl:'; & "$env:VCToolsInstallDir\bin\Hostx64\x64\cl.exe" /? | Out-Null; if ($LASTEXITCODE -ne 0) { Write-Error 'MSVC cl not found' }

      # ---------- Configure / Build ----------
      - name: "Configure (CMake + Ninja) [Windows]"
        if: runner.os == 'Windows'
        working-directory: "${{ env.SHORT_WS }}"
        env:
          VCPKG_DOWNLOADS: "C:\\vd"
        run: >
          cmake -S . -B _b
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.SHORT_WS }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          -DVCPKG_INSTALLED_DIR=C:/vi
          -DCMAKE_MAKE_PROGRAM=ninja
          -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: "Build [Windows]"
        if: runner.os == 'Windows'
        working-directory: "${{ env.SHORT_WS }}"
        run: cmake --build _b

      - name: "Configure (CMake + Ninja) [Unix]"
        if: runner.os != 'Windows'
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
          -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: "Build [Unix]"
        if: runner.os != 'Windows'
        run: cmake --build build

      # ---------- 失敗時ログ回収 ----------
      - name: "Upload vcpkg logs (on fail, Windows)"
        if: failure() && runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: "vcpkg-logs-windows"
          path: |
            ${{ env.SHORT_WS }}/vcpkg/buildtrees/**/*.log
            ${{ env.SHORT_WS }}/vcpkg/buildtrees/**/*-out.log

      - name: "Upload CMake logs (on fail, Unix)"
        if: failure() && runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: "cmake-logs-unix"
          path: |
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log

      - name: "Upload build logs (on fail, Unix)"
        if: failure() && runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: "build-logs-unix"
          path: |
            build/**/*.log
            build/**/Testing/**/*.log

      - name: "Upload build artifacts"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "${{ runner.os }}-${{ matrix.build_type }}-binaries"
          path: |
            _b/**
            build/**
            !**/CMakeFiles/**
            !**/Testing/**
