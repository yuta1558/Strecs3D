name: build

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cmake:
    name: ${{ matrix.os }} | ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows
            build_type: Release
          - os: macos-14
            triplet: arm64-osx
            build_type: Release

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_BUILD_TYPE: release
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      # vcpkg内部のCMakeにNinjaを強制（Ninja未検出対策）
      VCPKG_CMAKE_CONFIGURE_OPTIONS: "-G;Ninja;-DCMAKE_MAKE_PROGRAM=ninja"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get CMake + Ninja
        uses: lukka/get-cmake@latest

      # ---------- Windows: “実ディレクトリ”短縮。substは使わない ----------
      - name: Prepare short workspace (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path C:\w  | Out-Null
          robocopy $env:GITHUB_WORKSPACE C:\w /MIR /NFL /NDL /NJH /NJS /NP | Out-Null
          echo "SHORT_WS=C:\w" | Out-File -FilePath $env:GITHUB_ENV -Append
          New-Item -ItemType Directory -Force -Path C:\v  | Out-Null  # vcpkg root
          New-Item -ItemType Directory -Force -Path C:\vd | Out-Null  # downloads
          New-Item -ItemType Directory -Force -Path C:\vi | Out-Null  # installed

      - name: Enable long paths (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: git config --system core.longpaths true

      - name: Setup MSVC Dev Environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install ninja --no-progress -y
          ninja --version

      - name: Setup Python (Windows)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # ---------- Unix（macOS/Ubuntu）: ビルド必須ツール ----------
      - name: Install build deps (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y \
              build-essential \
              ninja-build \
              autoconf-archive \
              pkg-config
          else
            brew update
            brew install \
              autoconf-archive \
              automake \
              libtool \
              pkg-config \
              ninja
          fi

      # ---------- vcpkg（Windowsは固定短パス、macはデフォルト） ----------
      - name: Setup vcpkg (manifest) [Windows]
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: C:\v
          vcpkgJsonGlob: "vcpkg.json"
          doNotUpdateVcpkg: true   # 毎回ポート更新しない（再現性重視）

      - name: Setup vcpkg (manifest) [Unix]
        if: runner.os != 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: "vcpkg.json"
          doNotUpdateVcpkg: true

      # ---------- Windows: 壊れた中間物を掃除（harfbuzz/Qt系） ----------
      - name: Clean vcpkg buildtrees (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          foreach ($p in @("qtdeclarative","qtbase","harfbuzz")) {
            $t = "C:\v\buildtrees\$p"
            if (Test-Path $t) { Remove-Item $t -Recurse -Force -ErrorAction SilentlyContinue }
          }

      # ---------- Configure / Build ----------
      - name: Configure (CMake + Ninja) [Windows]
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        env:
          VCPKG_DOWNLOADS: C:\vd
        run: >
          cmake -S . -B _b
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
          -DVCPKG_INSTALLED_DIR=C:/vi
          -DCMAKE_MAKE_PROGRAM=ninja

      - name: Build [Windows]
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        run: cmake --build _b

      - name: Configure (CMake + Ninja) [Unix]
        if: runner.os != 'Windows'
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"

      - name: Build [Unix]
        if: runner.os != 'Windows'
        run: cmake --build build

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.build_type }}-binaries
          path: |
            _b/**
            build/**
            !**/CMakeFiles/**
            !**/Testing/**
