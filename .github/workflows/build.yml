name: build

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cmake:
    name: ${{ matrix.os }} | ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows
            build_type: Release
          - os: macos-14
            triplet: arm64-osx
            build_type: Release

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_BUILD_TYPE: release
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      # ★ vcpkg に Ninja を強制指定（全ポートの CMake に効く）
      VCPKG_CMAKE_CONFIGURE_OPTIONS: "-G;Ninja;-DCMAKE_MAKE_PROGRAM=ninja"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get CMake + Ninja
        uses: lukka/get-cmake@latest

      # ---------- Windows: 長パス対策 & 必須ツール ----------
      - name: Enable long paths (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: git config --system core.longpaths true

      - name: Map short drive on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          subst S: $env:GITHUB_WORKSPACE
          echo "SHORT_WS=S:\\" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Setup MSVC Dev Environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # ★ Chocolatey で ninja を導入（確実に PATH に入る）
      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install ninja --no-progress -y
          ninja --version

      - name: Setup Python (Windows)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # ---------- Unix系（macOS/Ubuntu）の必須ビルドツール ----------
      - name: Install build deps (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y \
              build-essential \
              ninja-build \
              autoconf-archive \
              pkg-config
          else
            brew update
            brew install \
              autoconf-archive \
              automake \
              libtool \
              pkg-config \
              ninja
          fi

      # ---------- vcpkg をセットアップ（Windowsは超短パスに配置・WS配下） ----------
      - name: Setup vcpkg (manifest) [Windows short path]
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ env.SHORT_WS }}\vcpkg
          vcpkgJsonGlob: "vcpkg.json"

      - name: Setup vcpkg (manifest) [Unix]
        if: runner.os != 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: "vcpkg.json"

      # ---------- Windows: 以前の失敗で残った長パス成果物を掃除（harfbuzz/Qt系） ----------
      - name: Clean vcpkg buildtrees (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          foreach ($p in @("qtdeclarative","qtbase","harfbuzz")) {
            $t = "${{ env.SHORT_WS }}\vcpkg\buildtrees\$p"
            if (Test-Path $t) { Remove-Item $t -Recurse -Force -ErrorAction SilentlyContinue }
          }

      # ---------- Configure / Build ----------
      # Windows: 超短ディレクトリで、vcpkg の各ディレクトリも短縮
      - name: Configure (CMake + Ninja) [Windows short path]
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        env:
          VCPKG_DOWNLOADS: ${{ env.SHORT_WS }}\vcpkg_downloads
        run: >
          cmake -S . -B _b
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
          -DVCPKG_INSTALLED_DIR=${{ env.SHORT_WS }}/vcpkg_installed
          -DCMAKE_MAKE_PROGRAM=ninja

      - name: Build [Windows short path]
        if: runner.os == 'Windows'
        working-directory: ${{ env.SHORT_WS }}
        run: cmake --build _b

      # Unix系は従来どおり
      - name: Configure (CMake + Ninja) [Unix]
        if: runner.os != 'Windows'
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"

      - name: Build [Unix]
        if: runner.os != 'Windows'
        run: cmake --build build

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.build_type }}-binaries
          path: |
            _b/**
            build/**
            !**/CMakeFiles/**
            !**/Testing/**
