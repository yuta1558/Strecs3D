name: build

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cmake:
    name: ${{ matrix.os }} | ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 300
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows
            build_type: Release
          - os: macos-14
            triplet: arm64-osx
            build_type: Release

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_BUILD_TYPE: release
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg-cache

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Ensure sufficient disk space (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $d = Get-PSDrive -Name C
          "{0:N2} GB free / {1:N2} GB total" -f ($d.Free/1GB), (($d.Used+$d.Free)/1GB) | Write-Host
          Write-Host "⚠️ If free space < ~15GB, VTK+Qt builds may fail."

      - name: Ensure sufficient disk space (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          df -h /
          echo "⚠️ If free space < ~15GB, VTK+Qt builds may fail."

      - name: Cache vcpkg (local binary cache)
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg-cache
          key: vcpkg-v3-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json') }}-${{ hashFiles('cmake/common_settings.cmake') }}-${{ hashFiles('cmake/windows_settings.cmake') }}-${{ hashFiles('cmake/macos_settings.cmake') }}
          restore-keys: |
            vcpkg-v3-${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('vcpkg.json') }}-
            vcpkg-v3-${{ runner.os }}-${{ matrix.triplet }}-
            vcpkg-v3-${{ runner.os }}-
          enableCrossOsArchive: false

      - name: Ensure vcpkg cache dir
        shell: bash
        run: mkdir -p "${{ github.workspace }}/vcpkg-cache"

      - name: Get CMake + Ninja
        uses: lukka/get-cmake@latest

      - name: Prepare short workspace (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path 'C:\w') { Remove-Item 'C:\w' -Recurse -Force }
          New-Item -ItemType Directory -Force -Path 'C:\w' | Out-Null
          Copy-Item "$env:GITHUB_WORKSPACE\*" 'C:\w' -Recurse -Force
          'SHORT_WS=C:\w' | Out-File -FilePath $env:GITHUB_ENV -Append
          New-Item -ItemType Directory -Force -Path 'C:\vd' | Out-Null
          New-Item -ItemType Directory -Force -Path 'C:\vi' | Out-Null

      - name: Enable long paths (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: ${{ env.SHORT_WS }}
        run: |
          git config --global core.longpaths true
          git config core.longpaths true

      - name: Setup MSVC Dev Environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install ninja --no-progress -y
          ninja --version

      - name: Install build deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf-archive automake libtool pkg-config ninja jq

      - name: Clone vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Test-Path "$env:SHORT_WS\vcpkg\.git")) {
            git clone https://github.com/microsoft/vcpkg.git "$env:SHORT_WS\vcpkg"
          }

      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          & "$env:SHORT_WS\vcpkg\bootstrap-vcpkg.bat" -disableMetrics

      - name: Setup vcpkg (manifest) [Windows]
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ env.SHORT_WS }}\vcpkg
          vcpkgJsonGlob: vcpkg.json
          doNotUpdateVcpkg: true

      - name: Setup vcpkg (manifest) [macOS]
        if: runner.os == 'macOS'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: vcpkg.json
          doNotUpdateVcpkg: true

      # --- 以下の Configure / Build / Install / Verify / Upload はそのまま ---
      # （あなたが最後に貼った内容でOK。違いはキャッシュキーとインデント修正だけ）
